import React, { useState } from "react";
import api from "../api";
import styles from "../styles/Login.module.css";
import { FaUser, FaLock, FaEye, FaEyeSlash } from "react-icons/fa";
import { useNavigate } from "react-router-dom";
import { jwtDecode } from "jwt-decode"; // ‚úÖ 1. Import jwt-decode

// ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ YYYY-MM-DD ‡πÅ‡∏ö‡∏ö Local time (‡∏Å‡∏±‡∏ô -1 ‡∏ß‡∏±‡∏ô)
const localISODate = (d = new Date()) => {
  const dt = new Date(d);
  dt.setMinutes(dt.getMinutes() - dt.getTimezoneOffset());
  return dt.toISOString().slice(0, 10);
};

// üó∫Ô∏è Mapping user ‚Üí ‡∏´‡∏ô‡πâ‡∏≤
const userPageMap = {
  lr: "/lrpage",
  or: "/orpage",
  hd: "/hdpage",
  cl: "/clpage",
  cu: "/cupage",
  stch: "/stchpage",
  endo: "/endopage",
  rt: "/rtpage",
  ir: "/irpage",
  nm: "/nmpage",
  sl: "/slpage",
  pft: "/pftpage",
  nwcw: "/nwcwpage",
  er: "/erpage",
  opd: "/opdpage",


  // ‡πÄ‡∏û‡∏¥‡πà‡∏° user ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÑ‡∏î‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‡πÄ‡∏ä‡πà‡∏ô
  // nicu: "/nicipage",
  // pp: "/pppage",
};

// üó∫Ô∏è Mapping wardname ‚Üí ‡∏´‡∏ô‡πâ‡∏≤ (‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô decode token ‡πÑ‡∏î‡πâ ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢ user/ward)
// eslint-disable-next-line no-unused-vars
const wardPageMap = {
  "‡∏´‡πâ‡∏≠‡∏á‡∏Ñ‡∏•‡∏≠‡∏î": "/lrpage",
  "‡∏´‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î": "/orpage",
  "‡πÑ‡∏ï‡πÄ‡∏ó‡∏µ‡∏¢‡∏°": "/hdpage",
  "Cath lab": "/clpage",
  "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à": "/cupage",
  "‡πÄ‡∏Ñ‡∏°‡∏µ‡∏ö‡∏≥‡∏ö‡∏±‡∏î(‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏©)": "/stchpage",
  "‡∏™‡πà‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á": "/endopage",
  "‡∏£‡∏±‡∏á‡∏™‡∏µ‡∏£‡∏±‡∏Å‡∏©‡∏≤": "/rtpage",
  "‡∏£‡∏±‡∏á‡∏™‡∏µ‡∏£‡πà‡∏ß‡∏°‡∏£‡∏±‡∏Å‡∏©‡∏≤": "/irpage",
  "‡πÄ‡∏ß‡∏ä‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏ô‡∏¥‡∏ß‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå": "/nmpage",
  "Sleep lab": "/slpage",
  "‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏†‡∏≤‡∏û‡∏õ‡∏≠‡∏î": "/pftpage",
  "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏û‡∏±‡∏Å‡∏ô‡∏ß‡∏ä‡∏µ‡∏ß‡∏≤": "/nwcwpage",
  "‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏": "/erpage",
  "‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ô‡∏≠‡∏Å": "/opdpage",


};

const Login = () => {
  const [form, setForm] = useState({ username: "", password: "" });
  const [error, setError] = useState("");
  const [showPwd, setShowPwd] = useState(false);
  const [loading, setLoading] = useState(false);
  const [remember, setRemember] = useState(true);
  const navigate = useNavigate();

  const handleChange = (e) => {
    setForm((prev) => ({ ...prev, [e.target.name]: e.target.value }));
  };

  // ‚úÖ 2. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï handleSubmit ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");
    setLoading(true);

    try {
      const res = await api.post("/api/login", form);
      const token = res.data.token;

      // ‡πÄ‡∏Å‡πá‡∏ö token
      if (remember) {
        localStorage.setItem("token", token);
      } else {
        sessionStorage.setItem("token", token);
      }

      // --- üí° ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ üí° ---
      
      // ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ token ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Role
      const user = jwtDecode(token); 
      
      const shift = "morning";
      const date = localISODate();

      // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Role ‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏Å‡πà‡∏≠‡∏ô (Admin, Supervisor)
      if (user.role === 'Admin' || user.role === 'Supervisor') {
        // ‚ùóÔ∏è ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ /admindashboard ‡πÄ‡∏≠‡∏á
        navigate(`/adminpage`);
        return;
      }

      // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö GroupLeader
      if (user.role === 'GroupLeader') {
        // ‚ùóÔ∏è ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ /departmentdashboard ‡πÄ‡∏≠‡∏á
        // ‡πÄ‡∏£‡∏≤‡∏™‡πà‡∏á departmentId ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô token ‡πÑ‡∏õ
        navigate(`/departmentdashboard/${user.departmentId}?shift=${shift}&date=${date}`); 
        return;
      }

      // 3. ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Role 'User' (‡∏´‡∏£‡∏∑‡∏≠ Role ‡∏≠‡∏∑‡πà‡∏ô‡πÜ) ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡πÄ‡∏î‡∏¥‡∏°
      const username = user.username.trim().toLowerCase();
      
      // ‚úÖ 3.1 ‡πÉ‡∏ä‡πâ userPageMap (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
      if (userPageMap[username]) {
        navigate(
          `${userPageMap[username]}?shift=${encodeURIComponent(
            shift
          )}&date=${encodeURIComponent(date)}`
        );
        return;
      }

      // ‚úÖ 3.2 ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ /main (‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å /api/subwards ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
      // ‡πÄ‡∏£‡∏≤‡∏î‡∏∂‡∏á subward ‡∏°‡∏≤‡∏à‡∏≤‡∏Å token ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ (‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ‡πÉ‡∏ô authRoutes.js)
      const subward = user.subWard || ""; 

      navigate(
        `/main?shift=${encodeURIComponent(shift)}&date=${encodeURIComponent(
          date
        )}&subward=${encodeURIComponent(subward)}`
      );

    } catch (err) {
      const msg =
        err?.response?.data?.message ||
        err?.message ||
        "Invalid username or password";
      setError(msg);
      console.error("Login error:", err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className={styles.loginPage}>
      <div className={styles.loginBox}>
        {/* Panel ‡∏ã‡πâ‡∏≤‡∏¢: Branding */}
        <div className={styles.loginLeft}>
          <div className={styles.brandWrap}>
            <div className={styles.brandIcon}></div>
          </div>
        </div>

        {/* Panel ‡∏Ç‡∏ß‡∏≤: ‡∏ü‡∏≠‡∏£‡πå‡∏° */}
        <div className={styles.loginRight}>
          <div className={styles.loginHeader}>
            <h2>‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô</h2>
            <p>‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏°‡∏´‡∏≤‡∏£‡∏≤‡∏ä‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä</p>
          </div>

          <form onSubmit={handleSubmit} className={styles.form} noValidate>
            <div className={styles.inputGroup}>
              <FaUser className={styles.icon} />
              <input
                id="username"
                name="username"
                type="text"
                placeholder="Username"
                value={form.username}
                onChange={handleChange}
                autoComplete="username"
                autoCapitalize="none"
                autoCorrect="off"
                autoFocus
                required
              />
            </div>

            <div className={styles.inputGroup}>
              <FaLock className={styles.icon} />
              <input
                id="password"
                name="password"
                type={showPwd ? "text" : "password"}
                placeholder="Password"
                value={form.password}
                onChange={handleChange}
                autoComplete="current-password"
                required
              />
              <button
                type="button"
                className={styles.togglePwd}
                onClick={() => setShowPwd((s) => !s)}
              >
                {showPwd ? <FaEyeSlash /> : <FaEye />}
              </button>
            </div>

            <div className={styles.formRow}>
              <label className={styles.rememberMe}>
                <input
                  type="checkbox"
                  checked={remember}
                  onChange={(e) => setRemember(e.target.checked)}
                />
                ‡∏à‡∏î‡∏à‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
              </label>
            </div>

            <button
              type="submit"
              className={styles.loginBtn}
              disabled={loading}
            >
              {loading ? (
                <span className={styles.spinner} />
              ) : (
                "Log in"
              )}
            </button>

            {error && (
              <p className={styles.error} role="alert">
                {error}
              </p>
            )}
          </form>
        </div>
      </div>
    </div>
  );
};

export default Login;
